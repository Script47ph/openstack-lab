---
# USER

- name: Create heat user
  os_user:
    cloud: openstack
    state: present
    name: heat
    password: "{{ openstack_heat_password }}"
    update_password: on_create
    domain: default
    default_project: admin
  when: inventory_hostname == groups['controller'][0]

- name: Grant admin role on the heat user
  os_user_role:
    cloud: openstack
    user: heat
    role: admin
    project: service
  when: inventory_hostname == groups['controller'][0]

- name: Create heat_stack_owner role
  os_keystone_role:
    cloud: openstack
    state: present
    name: heat_stack_owner
  when: inventory_hostname == groups['controller'][0]

- name: Create heat_stack_user role
  os_keystone_role:
    cloud: openstack
    state: present
    name: heat_stack_user
  when: inventory_hostname == groups['controller'][0]

- name: Grant heat_stack_owner role to the admin user
  os_user_role:
    cloud: openstack
    user: admin
    role: heat_stack_owner
    project: admin
  when: inventory_hostname == groups['controller'][0]

# CREATE SERVICE

- name: Create heat service
  os_keystone_service:
    cloud: openstack
    state: present
    name: heat
    service_type: orchestration
    description: "Openstack Orchestration"
  when: inventory_hostname == groups['controller'][0]

- name: Create heat-cfn service
  os_keystone_service:
    cloud: openstack
    state: present
    name: heat-cfn
    service_type: cloudformation
    description: "Openstack Orchestration"
  when: inventory_hostname == groups['controller'][0]

# ENDPOINT

- name: Create heat public endpoint
  os_keystone_endpoint:
    cloud: openstack
    service: heat
    endpoint_interface: public
    url: "http://{{ public_vip_hostname }}:8004/v1/%(tenant_id)s"
    region: "{{ region_name }}"
    state: present
  when: inventory_hostname == groups['controller'][0]

- name: Create heat internal endpoint
  os_keystone_endpoint:
    cloud: openstack
    service: heat
    endpoint_interface: internal
    url: "http://{{ internal_vip_hostname }}:8004/v1/%(tenant_id)s"
    region: "{{ region_name }}"
    state: present
  when: inventory_hostname == groups['controller'][0]

- name: Create heat admin endpoint
  os_keystone_endpoint:
    cloud: openstack
    service: heat
    endpoint_interface: admin
    url: "http://{{ admin_vip_hostname }}:8004/v1/%(tenant_id)s"
    region: "{{ region_name }}"
    state: present
  when: inventory_hostname == groups['controller'][0]

- name: Create heat-cfn public endpoint
  os_keystone_endpoint:
    cloud: openstack
    service: heat-cfn
    endpoint_interface: public
    url: "http://{{ public_vip_hostname }}:8000/v1"
    region: "{{ region_name }}"
    state: present
  when: inventory_hostname == groups['controller'][0]

- name: Create heat-cfn internal endpoint
  os_keystone_endpoint:
    cloud: openstack
    service: heat-cfn
    endpoint_interface: internal
    url: "http://{{ internal_vip_hostname }}:8000/v1"
    region: "{{ region_name }}"
    state: present
  when: inventory_hostname == groups['controller'][0]

- name: Create heat-cfn admin endpoint
  os_keystone_endpoint:
    cloud: openstack
    service: heat-cfn
    endpoint_interface: admin
    url: "http://{{ admin_vip_hostname }}:8000/v1"
    region: "{{ region_name }}"
    state: present
  when: inventory_hostname == groups['controller'][0]

# DOMAIN

- name: Create domain heat
  os_keystone_domain:
    cloud: openstack 
    state: present
    name: heat
    description: "Stack projects and users" 
  when: inventory_hostname == groups['controller'][0]

- name: Create heat_domain_admin user
  os_user:
    cloud: openstack
    state: present
    name: heat_domain_admin
    password: "{{ openstack_heat_domain_admin_password }}"
    update_password: on_create
    domain: heat
  when: inventory_hostname == groups['controller'][0]

- name: Grant admin role on the heat_domain_admin user
  os_user_role:
    cloud: openstack
    user: heat_domain_admin
    domain: heat
    role: admin
  when: inventory_hostname == groups['controller'][0]

# MARIADB

- name: Create heat database
  mysql_db:
    login_user: root
    login_password: "{{ mysql_root_password }}"
    login_unix_socket: /run/mysqld/mysqld.sock
    name: heat
    state: present
  when: inventory_hostname == groups['controller'][0]

- name: Grant heat database local host access
  mysql_user:
    login_user: root
    login_password: "{{ mysql_root_password }}"
    login_unix_socket: /run/mysqld/mysqld.sock
    name: heat
    password: "{{ mysql_heat_password }}"
    append_privs: true
    priv: 'heat.*:ALL'
  when: inventory_hostname == groups['controller'][0]

- name: Grant heat database controller host access
  mysql_user:
    login_user: root
    login_password: "{{ mysql_root_password }}"
    login_unix_socket: /run/mysqld/mysqld.sock
    name: heat
    password: "{{ mysql_heat_password }}"
    append_privs: true
    priv: 'heat.*:ALL'
    host: "{{ hostvars[item]['ansible_hostname'] }}"
  with_items: "{{ groups['controller'] }}"
  when: inventory_hostname == groups['controller'][0]

- name: Grant heat database any host access
  mysql_user:
    login_user: root
    login_password: "{{ mysql_root_password }}"
    login_unix_socket: /run/mysqld/mysqld.sock
    name: heat
    password: "{{ mysql_heat_password }}"
    append_privs: true
    priv: 'heat.*:ALL'
    host: '%'
  when: inventory_hostname == groups['controller'][0]

- name: Install heat packages
  apt:
    name: "{{ heat.controller.packages }}"
    state: latest

- name: Create heat configuration file
  template:
    src: heat.conf.j2
    dest: /etc/heat/heat.conf
    group: heat

- name: Populate heat db_sync
  shell: heat-manage db_sync
  become: yes
  become_user: heat
  when: inventory_hostname == groups['controller'][0]

- name: Restart heat service
  systemd:
    name: "{{ item }}"
    state: restarted
  with_items:
    - heat-api
    - heat-api-cfn
    - heat-engine

- name: Install heat-dashboard
  apt:
    name: python3-heat-dashboard
    state: latest
  
- name: Restart apache2 service
  systemd:
    name: apache2
    state: restarted
